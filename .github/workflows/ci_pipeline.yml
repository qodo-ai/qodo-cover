name: CI Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '2.1.3'
  FAKE_OPENAI_API_KEY: "sk-fake-key-for-testing-only"

jobs:
  # Checks for changes in version.txt (used for release job)
  changes:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.filter.outputs.version_changed }}
      relevant_changes: ${{ steps.filter.outputs.relevant_changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            version_changed:
              - 'cover_agent/version.txt'
            relevant_changes:
              - '!README.md'
              - '!docs/**'
              - '!*.md'

  test:
    needs: [changes]
    if: needs.changes.outputs.relevant_changes == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures we fetch all history for all branches

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: false

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run code linters
        run: make lint-check

      - name: Run tests and generate reports
        env:
          OPENAI_API_KEY: ${{ env.FAKE_OPENAI_API_KEY }}
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: cobertura.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: testLog.xml
          retention-days: 30

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: cobertura.xml
          retention-days: 30

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: testLog.xml

  package-test:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build package
        run: poetry build

      - name: Test package installation
        run: |
          pip install dist/*.whl
          cd /tmp
          cover-agent --help

  build:
    needs: [test, changes]
    if: needs.changes.outputs.relevant_changes == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
        include:
          - os: ubuntu-22.04
            executable: cover-agent
          - os: windows-latest
            executable: cover-agent.exe
          - os: macos-latest
            executable: cover-agent

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Dependencies
      run: |
        make setup-installer
        poetry install --no-interaction

    - name: Build Executable
      run: make installer

    - name: Test Executable
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          ./dist/${{ matrix.executable }} --help
        else
          ./dist/${{ matrix.executable }} --help
        fi
      shell: bash

    - name: Upload Executable
      uses: actions/upload-artifact@v4
      with:
        name: cover-agent-${{ matrix.os }}
        path: dist/${{ matrix.executable }}
        retention-days: 30

  e2e-test:
    # This job will run after building binary because it needs the binary to run the E2E tests in Docker
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download Ubuntu executable
        uses: actions/download-artifact@v4
        with:
          name: cover-agent-ubuntu-22.04
          path: dist

      - name: Make binary executable
        run: chmod +x dist/cover-agent

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run E2E Docker tests
        env:
          OPENAI_API_KEY: ${{ env.FAKE_OPENAI_API_KEY }}
        run: |
          make e2e-test 2>&1 | tee e2e_test_full.log

      - name: Upload E2E Docker test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-reports
          path: |
            testLog_e2e.xml
            e2e_test_full.log
          retention-days: 30

      - name: Publish e2e test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: testLog_e2e.xml

  release:
    # This job will run only if the following conditions are met:
    # - The event is a 'push' to the 'main' branch
    # - The 'version.txt' file has changed
    # - There are relevant changes outside 'README.md' and the 'docs/' folder
    needs: [build, changes, e2e-test]
    if: >
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      needs.changes.outputs.version_changed == 'true' &&
      needs.changes.outputs.relevant_changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4

    - name: Download all executables
      uses: actions/download-artifact@v4
      with:
        pattern: cover-agent-*
        path: dist
        merge-multiple: false

    - name: Extract version
      id: version
      run: |
        VERSION=$(cat cover_agent/version.txt)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.VERSION }}
        name: Release ${{ env.VERSION }}
        draft: false
        prerelease: false
        files: |
          dist/cover-agent-ubuntu-22.04/cover-agent
          dist/cover-agent-windows-latest/cover-agent.exe
          dist/cover-agent-macos-latest/cover-agent
        body: |
          ## Release ${{ env.VERSION }}

          ### Downloads
          - **Ubuntu/Linux**: cover-agent
          - **Windows**: cover-agent.exe
          - **macOS**: cover-agent

          Built from commit: ${{ github.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
